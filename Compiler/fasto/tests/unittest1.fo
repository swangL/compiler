
fun [char] write_nl ([char] str) =
  let w = write(str) in write("\n")

fun [char] assert (bool f) =
  if f then write_nl("true") else write_nl("false")

fun int main () =
  let ww = write_nl("subtraction") in
    let w = write_nl("pos int - pos int, ") in
      let a = assert(5 - 3 == 2) in
    let w = write_nl("neg int - pos int, ") in
      let a = assert((0-5) - 3 == (0-8)) in
    let w = write_nl("pos int - neg int, ") in
      let a = assert(5 - (0-10) == 15) in
    let w = write_nl("neg int - neg int, ") in
      let a = assert((0-7) - (0-5) == (0-2)) in

  let ww = write_nl("\naddition") in
    let w = write_nl("pos int + pos int, ") in
      let a = assert(2 + 2 == 4) in
    let w = write_nl("neg int + pos int, ") in
      let a = assert((0 - 2) + 4 == 2) in
    let w = write_nl("pos int + neg int, ") in
      let a = assert(5 + (0-10) == (0-5)) in
    let w = write_nl("neg int + neg int, ") in
      let a = assert((0-6) + (0-3) == (0-9)) in

  let ww = write_nl("\nmultiplication") in
    let w = write_nl("pos int * pos int, ") in
      let a = assert(4 * 4 == 16) in
    let w = write_nl("neg int * pos int, ") in
      let a = assert((0-4) * 4 == (0-16)) in
    let w = write_nl("pos int * neg int, ") in
      let a = assert(4 * (0-4) == (0-16)) in
    let w = write_nl("neg int * neg int, ") in
      let a = assert((0-4) * (0-4) == 16) in
    let w = write_nl("zero * pos int, ") in
      let a = assert(0 * 4 == 0) in
    let w = write_nl("zero * neg int, ") in
      let a = assert(0 * (0-4) == 0) in

  let ww = write_nl("\ndivision") in
    let w = write_nl("pos int / pos int, ") in
      let a = assert(10 / 2 == 5) in
    let w = write_nl("neg int / pos int, ") in
      let a = assert((0-10) / 2 == (0-5)) in
    let w = write_nl("pos int / neg int, ") in
      let a = assert(10 / (0-2) == (0-5)) in
    let w = write_nl("neg int / neg int, ") in
      let a = assert((0-10) / (0-2) == 5) in
    let w = write_nl("zero / pos int, ") in
      let a = assert(0 / 5 == 0) in
    let w = write_nl("zero / neg int, ") in
      let a = assert(0 / (0-5) == 0) in

  let ww = write_nl("\nlogical and") in
    let w = write_nl("true && true, ") in
      let a = assert(true && true == true) in
    let w = write_nl("true && false, ") in
      let a = assert(true && false == false) in
    let w = write_nl("false && true, ") in
      let a = assert(false && true == false) in
    let w = write_nl("false && false, ") in
      let a = assert(false && false == false) in

  let ww = write_nl("\nlogical or") in
    let w = write_nl("true || true, ") in
      let a = assert(true || true == true) in
    let w = write_nl("true || false, ") in
      let a = assert(true || false == true) in
    let w = write_nl("false || true, ") in
      let a = assert(false || true == true) in
    let w = write_nl("false || false, ") in
      let a = assert(false || false == false) in

  // TODO:
  let ww = write_nl("\nlogical negation") in
    let w = write_nl("not true, ") in
      let a = assert(not true == false) in
    let w = write_nl("not false, ") in
      let a = assert(not false == true) in
    let w = write_nl("not not true, ") in
      let a = assert(not not true == true) in
    let w = write_nl("not not false, ") in
      let a = assert(not not false == false) in

  let ww = write_nl("\numerical negation") in
    let w = write_nl("~5") in
      let a = assert(~5 == 0-5) in
    let w = write_nl("~(-10)") in
      let a = assert(~(0-10) == 10) in
  0
